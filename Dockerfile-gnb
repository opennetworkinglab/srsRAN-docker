#
# Copyright 2021-2024 Software Radio Systems Limited
#
# This file is part of srsRAN
#
# srsRAN is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of
# the License, or (at your option) any later version.
#
# srsRAN is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# A copy of the GNU Affero General Public License can be found in
# the LICENSE file in the top-level directory of this distribution
# and at http://www.gnu.org/licenses/.
#

# Build args
################
# OS_VERSION            Ubuntu OS version
# LIB                   uhd or dpdk (lowercase)
# LIB_VERSION           UHD or DPDK version number
# MARCH                 gcc/clang compatible arch
# NUM_CORES             Number or empty for all
# EXTRA_CMAKE_ARGS      Extra flags for srsRAN Project

ARG OS_VERSION=24.04
ARG SRSRAN_BRANCH=release_24_10
ARG LIB=uhd
ARG LIB_VERSION=4.7.0.0
ARG MARCH=native
ARG NUM_CORES=""
ARG EXTRA_CMAKE_ARGS="-DENABLE_EXPORT=ON -DENABLE_ZEROMQ=ON"

##################
# Stage 1: Build #
##################
FROM ubuntu:$OS_VERSION AS builder

RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    git \
    git-lfs \
    ca-certificates

# Adding the complete repo to the context, in /src folder
# ADD . /src/
# An alternative could be to download the repo
ARG SRSRAN_BRANCH
RUN git clone --depth 1 --branch ${SRSRAN_BRANCH} https://github.com/srsran/srsRAN_Project.git /src

# Install srsRAN build dependencies
ARG LIB
RUN /src/docker/scripts/install_dependencies.sh build && \
    /src/docker/scripts/install_dependencies.sh extra && \
    /src/docker/scripts/install_${LIB}_dependencies.sh build

ARG LIB_VERSION
ARG MARCH
ARG NUM_CORES

# Compile UHD/DPDK
RUN /src/docker/scripts/build_${LIB}.sh ${LIB_VERSION} ${MARCH} ${NUM_CORES}

# Compile srsRAN Project and install it in the OS
ARG EXTRA_CMAKE_ARGS
RUN if [ -z "$NUM_CORES" ]; then NUM_CORES=$(nproc); fi && \
    LIB_UPPER=$(echo $LIB | tr '[:lower:]' '[:upper:]') && \
    export ${LIB_UPPER}_DIR="/opt/${LIB}/${LIB_VERSION}" && \
    if [ "$LIB_UPPER" = "UHD" ]; then SPLIT="SPLIT_8"; else SPLIT="SPLIT_7_2"; fi \
    && \
    /src/docker/scripts/builder.sh -m "-j${NUM_CORES} install" \
    -DBUILD_TESTS=False -DMARCH=${MARCH} -DCMAKE_INSTALL_PREFIX=/opt/srs \
    ${EXTRA_CMAKE_ARGS} /src

# Copy extra binaries
# RUN cp /src/build/tests/integrationtests/ofh/ru_emulator /opt/srs/bin/ru_emulator

################
# Stage 2: Run #
################

FROM ubuntu:$OS_VERSION AS gnb

LABEL maintainer="Aether SD-Core <dev@lists.aetherproject.org>" \
    description="Image" \
    version="Stage 3"

ARG LIB
ARG LIB_VERSION

# Copy srsRAN binaries and libraries installed in previous stage
COPY --from=builder /opt/${LIB}/${LIB_VERSION} /opt/${LIB}/${LIB_VERSION}
COPY --from=builder /opt/srs /usr/local

# Set PATH/LD_PATH
ENV LD_LIBRARY_PATH=/opt/${LIB}/${LIB_VERSION}/lib/${LD_LIBRARY_PATH:+:$LD_LIBRARY_PATH}
ENV PATH=$PATH:/opt/${LIB}/${LIB_VERSION}/bin/

# Install srsran and lib runtime dependencies
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    libfftw3-bin \
    libmbedtls14t64 \
    libsctp1 \
    libyaml-cpp0.8 \
    libdwarf1 \
    libuhd4.6.0t64 \
    libzmq5 \
    libdpdk-dev \
    cpufrequtils \
    inetutils-tools \
    iputils-ping \
    iproute2 && \
    apt-get autoremove && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

CMD ["/bin/bash", "-c", "gnb -c /opt/gnb_zmq.conf"]
